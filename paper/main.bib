@inproceedings{10.1145/2382196.2382205,
author = {Fahl, Sascha and Harbach, Marian and Muders, Thomas and Baumg\"{a}rtner, Lars and Freisleben, Bernd and Smith, Matthew},
title = {Why eve and mallory love android: an analysis of android SSL (in)security},
year = {2012},
isbn = {9781450316514},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2382196.2382205},
doi = {10.1145/2382196.2382205},
abstract = {Many Android apps have a legitimate need to communicate over the Internet and are then responsible for protecting potentially sensitive data during transit. This paper seeks to better understand the potential security threats posed by benign Android apps that use the SSL/TLS protocols to protect data they transmit. Since the lack of visual security indicators for SSL/TLS usage and the inadequate use of SSL/TLS can be exploited to launch Man-in-the-Middle (MITM) attacks, an analysis of 13,500 popular free apps downloaded from Google's Play Market is presented. We introduce MalloDroid, a tool to detect potential vulnerability against MITM attacks. Our analysis revealed that 1,074 (8.0\%) of the apps examined contain SSL/TLS code that is potentially vulnerable to MITM attacks. Various forms of SSL/TLS misuse were discovered during a further manual audit of 100 selected apps that allowed us to successfully launch MITM attacks against 41 apps and gather a large variety of sensitive data. Furthermore, an online survey was conducted to evaluate users' perceptions of certificate warnings and HTTPS visual security indicators in Android's browser, showing that half of the 754 participating users were not able to correctly judge whether their browser session was protected by SSL/TLS or not. We conclude by considering the implications of these findings and discuss several countermeasures with which these problems could be alleviated.},
booktitle = {Proceedings of the 2012 ACM Conference on Computer and Communications Security},
pages = {50–61},
numpages = {12},
keywords = {android, apps, mitma, security, ssl},
location = {Raleigh, North Carolina, USA},
series = {CCS '12}
}

@misc{androguard,
  author = {Anthony Desnos, Geoffroy Gueguen, Sebastian Bachmann},
  title = {Androguard},
  year = {2018},
  howpublished = {\url{https://github.com/androguard/androguard}}
}

@inproceedings{10.1145/1999995.2000018,
author = {Chin, Erika and Felt, Adrienne Porter and Greenwood, Kate and Wagner, David},
title = {Analyzing inter-application communication in Android},
year = {2011},
isbn = {9781450306430},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1999995.2000018},
doi = {10.1145/1999995.2000018},
abstract = {Modern smartphone operating systems support the development of third-party applications with open system APIs. In addition to an open API, the Android operating system also provides a rich inter-application message passing system. This encourages inter-application collaboration and reduces developer burden by facilitating component reuse. Unfortunately, message passing is also an application attack surface. The content of messages can be sniffed, modified, stolen, or replaced, which can compromise user privacy. Also, a malicious application can inject forged or otherwise malicious messages, which can lead to breaches of user data and violate application security policies.We examine Android application interaction and identify security risks in application components. We provide a tool, ComDroid, that detects application communication vulnerabilities. ComDroid can be used by developers to analyze their own applications before release, by application reviewers to analyze applications in the Android Market, and by end users. We analyzed 20 applications with the help of ComDroid and found 34 exploitable vulnerabilities; 12 of the 20 applications have at least one vulnerability.},
booktitle = {Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services},
pages = {239–252},
numpages = {14},
keywords = {Android, intents, message passing, mobile phone security},
location = {Bethesda, Maryland, USA},
series = {MobiSys '11}
}

@inproceedings{10.1145/1653662.1653691,
author = {Enck, William and Ongtang, Machigar and McDaniel, Patrick},
title = {On lightweight mobile phone application certification},
year = {2009},
isbn = {9781605588940},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1653662.1653691},
doi = {10.1145/1653662.1653691},
abstract = {Users have begun downloading an increasingly large number of mobile phone applications in response to advancements in handsets and wireless networks. The increased number of applications results in a greater chance of installing Trojans and similar malware. In this paper, we propose the Kirin security service for Android, which performs lightweight certification of applications to mitigate malware at install time. Kirin certification uses security rules, which are templates designed to conservatively match undesirable properties in security configuration bundled with applications. We use a variant of security requirements engineering techniques to perform an in-depth security analysis of Android to produce a set of rules that match malware characteristics. In a sample of 311 of the most popular applications downloaded from the official Android Market, Kirin and our rules found 5 applications that implement dangerous functionality and therefore should be installed with extreme caution. Upon close inspection, another five applications asserted dangerous rights, but were within the scope of reasonable functional needs. These results indicate that security configuration bundled with Android applications provides practical means of detecting malware.},
booktitle = {Proceedings of the 16th ACM Conference on Computer and Communications Security},
pages = {235–245},
numpages = {11},
keywords = {mobile phone security, malware, android},
location = {Chicago, Illinois, USA},
series = {CCS '09}
}

@inproceedings{10.1145/2046707.2046779,
author = {Felt, Adrienne Porter and Chin, Erika and Hanna, Steve and Song, Dawn and Wagner, David},
title = {Android permissions demystified},
year = {2011},
isbn = {9781450309486},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2046707.2046779},
doi = {10.1145/2046707.2046779},
abstract = {Android provides third-party applications with an extensive API that includes access to phone hardware, settings, and user data. Access to privacy- and security-relevant parts of the API is controlled with an install-time application permission system. We study Android applications to determine whether Android developers follow least privilege with their permission requests. We built Stowaway, a tool that detects overprivilege in compiled Android applications. Stowaway determines the set of API calls that an application uses and then maps those API calls to permissions. We used automated testing tools on the Android API in order to build the permission map that is necessary for detecting overprivilege. We apply Stowaway to a set of 940 applications and find that about one-third are overprivileged. We investigate the causes of overprivilege and find evidence that developers are trying to follow least privilege but sometimes fail due to insufficient API documentation.},
booktitle = {Proceedings of the 18th ACM Conference on Computer and Communications Security},
pages = {627–638},
numpages = {12},
keywords = {android, least privilege, permissions},
location = {Chicago, Illinois, USA},
series = {CCS '11}
}





