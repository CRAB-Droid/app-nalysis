@inproceedings{10.1145/3086467.3086469,
author = {Shen, Feng},
title = {Android Security via Static Program Analysis},
year = {2017},
isbn = {9781450349574},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3086467.3086469},
doi = {10.1145/3086467.3086469},
abstract = {Android is a popular platform designed for mobile devices. It consists of a customized Linux kernel, middleware, and a few core applications such as the Phone application. The middleware, commonly referred to as the Android framework, provides libraries and runtime services to applications. Applications in Android are written mainly in Java. Once compiled, Android transforms its applications into the Dalvik Executable (or DEX) format to minimize the memory footprint. Android uses a Java VM called Dalvik to execute DEX bytecode. Unlike other mobile OSes, Android has a unique permission mechanism. At development time, an application developer needs to explicitly request permissions by including them in an application configuration file. We refer to this configuration file simply as the manifest invthe remainder of the paper. At installation time, each uservneeds to review the permissions that the application requestsvand explicitly grant them.},
booktitle = {Proceedings of the 2017 Workshop on MobiSys 2017 Ph.D. Forum},
pages = {19–20},
numpages = {2},
keywords = {static program analysis, mobile application, android security},
location = {Niagara Falls, New York, USA},
series = {Ph.D. Forum '17}
}


@inproceedings{10.1145/2382196.2382205,
author = {Fahl, Sascha and Harbach, Marian and Muders, Thomas and Baumg\"{a}rtner, Lars and Freisleben, Bernd and Smith, Matthew},
title = {Why eve and mallory love android: an analysis of android SSL (in)security},
year = {2012},
isbn = {9781450316514},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2382196.2382205},
doi = {10.1145/2382196.2382205},
abstract = {Many Android apps have a legitimate need to communicate over the Internet and are then responsible for protecting potentially sensitive data during transit. This paper seeks to better understand the potential security threats posed by benign Android apps that use the SSL/TLS protocols to protect data they transmit. Since the lack of visual security indicators for SSL/TLS usage and the inadequate use of SSL/TLS can be exploited to launch Man-in-the-Middle (MITM) attacks, an analysis of 13,500 popular free apps downloaded from Google's Play Market is presented. We introduce MalloDroid, a tool to detect potential vulnerability against MITM attacks. Our analysis revealed that 1,074 (8.0\%) of the apps examined contain SSL/TLS code that is potentially vulnerable to MITM attacks. Various forms of SSL/TLS misuse were discovered during a further manual audit of 100 selected apps that allowed us to successfully launch MITM attacks against 41 apps and gather a large variety of sensitive data. Furthermore, an online survey was conducted to evaluate users' perceptions of certificate warnings and HTTPS visual security indicators in Android's browser, showing that half of the 754 participating users were not able to correctly judge whether their browser session was protected by SSL/TLS or not. We conclude by considering the implications of these findings and discuss several countermeasures with which these problems could be alleviated.},
booktitle = {Proceedings of the 2012 ACM Conference on Computer and Communications Security},
pages = {50–61},
numpages = {12},
keywords = {android, apps, mitma, security, ssl},
location = {Raleigh, North Carolina, USA},
series = {CCS '12}
}
